There is no such thing as functional programming is Java, but sometimes we emulate it using anonymous classes.

FunkyJFunctional provides a new way to do functional programming in Java. It integrates with Guava, and uses some Java syntaxic sugar : method local class declarations and init blocks.

With Guava:

	List<Integer> values = Arrays.asList(16, 21);
	Predicate<Integer> adult = new Predicate<Integer>() {
		@Override
		public boolean apply(Integer input) {
			return input > 18;
		}
	};
	Iterable<Integer> adults = Iterables.filter(values, adult);
	
With FunkyJFunctional:	
	
	List<Integer> values = Arrays.asList(16, 21);
	class Adult extends P<Integer> {{r = t > 18;}};
	Iterable<Integer> adults = Iterables.filter(values, P.from(Adult.class));
	
We also provide functions:

	List<Integer> values = Arrays.asList(42, 69);
	class Price extends F<Integer, String> {{t = f+"â‚¬";}};
	List<String> prices = Lists.transform(values, F.from(Price.class));
	
And comparators:

	Person john = new Person("John");
	Person joe = new Person("Joe");
	
	List<Person> persons = Arrays.asList(john, joe);
	class Sort extends C<Person> {{r = t1.getName().compareTo(t2.getName());}};
	Ordering<Person> ordering = Ordering.from(C.from(Sort.class));
	
Sounds crazy? I think it is ;-). 